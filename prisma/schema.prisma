generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                  Int     @id @default(autoincrement())
  user_id             Int
  type                String  @db.VarChar(50)
  provider            String  @db.VarChar(50)
  provider_account_id String  @db.VarChar(150)
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String? @db.VarChar(50)
  scope               String? @db.VarChar(150)
  id_token            String?
  session_state       String? @db.VarChar(150)
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, provider_account_id])
}

model comments {
  id          Int       @id @default(autoincrement())
  post_id     Int?
  match_id    Int?
  user_name   String    @db.VarChar(100)
  user_email  String?   @db.VarChar(150)
  content     String
  is_approved Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  matches     matches?  @relation(fields: [match_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts       posts?    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([match_id], map: "idx_comments_match")
  @@index([post_id], map: "idx_comments_post")
}

model contracts {
  id            Int       @id @default(autoincrement())
  player_id     Int
  salary        Decimal?  @db.Decimal(12, 2)
  currency      String?   @default("EUR") @db.VarChar(3)
  start_date    DateTime  @db.Date
  end_date      DateTime  @db.Date
  contract_type String?   @db.VarChar(50)
  clauses       String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  players       players   @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model match_results {
  id                   Int       @id @default(autoincrement())
  match_id             Int       @unique
  home_score           Int?
  away_score           Int?
  half_time_home_score Int?
  half_time_away_score Int?
  match_report         String?
  attendance           Int?
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  matches              matches   @relation(fields: [match_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model matches {
  id                Int       @id @default(autoincrement())
  home_team         String    @db.VarChar(100)  // Cambiado de home_team_id
  away_team         String    @db.VarChar(100)  // Cambiado de away_team_id
  match_date        DateTime  @db.Timestamptz(6)
  venue             String?   @db.VarChar(100)
  competition       String?   @db.VarChar(100)
  match_day         Int?
  status            String?   @default("scheduled") @db.VarChar(20)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  comments          comments[]
  match_results     match_results?
  player_match_stats player_match_stats[]

  @@index([match_date], map: "idx_matches_date")
  @@index([status], map: "idx_matches_status")
  @@index([home_team, away_team], map: "idx_matches_teams") // √çndice actualizado
}

model player_match_stats {
  id               Int       @id @default(autoincrement())
  player_id        Int
  match_id         Int
  minutes_played   Int?      @default(0)
  goals            Int?      @default(0)
  assists          Int?      @default(0)
  yellow_cards     Int?      @default(0)
  red_cards        Int?      @default(0)
  shots            Int?      @default(0)
  shots_on_target  Int?      @default(0)
  passes           Int?      @default(0)
  pass_accuracy    Decimal?  @default(0) @db.Decimal(4, 1)
  tackles          Int?      @default(0)
  interceptions    Int?      @default(0)
  saves            Int?      @default(0)
  pro_clubs_rating Decimal?  @default(0) @db.Decimal(3, 1)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  matches          matches   @relation(fields: [match_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  players          players   @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([player_id, match_id])
  @@index([match_id], map: "idx_player_stats_match")
  @@index([player_id], map: "idx_player_stats_player")
}

model player_season_stats {
  id             Int       @id @default(autoincrement())
  player_id      Int
  season         String    @db.VarChar(9)
  matches_played Int?      @default(0)
  goals          Int?      @default(0)
  assists        Int?      @default(0)
  yellow_cards   Int?      @default(0)
  red_cards      Int?      @default(0)
  avg_rating     Decimal?  @default(0) @db.Decimal(3, 1)
  avg_minutes    Decimal?  @default(0) @db.Decimal(4, 1)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  players        players   @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([player_id, season])
}

model players {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  position            String                @db.VarChar(50)
  jersey_number       Int?
  nationality         String?               @db.VarChar(50)
  birth_date          DateTime?             @db.Date
  height_cm           Int?
  weight_kg           Int?
  photo_url           String?               @db.VarChar(255)
  bio                 String?
  is_active           Boolean?              @default(true)
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?             @default(now()) @db.Timestamptz(6)
  contracts           contracts[]
  player_match_stats  player_match_stats[]
  player_season_stats player_season_stats[]

  @@index([position], map: "idx_players_position")
}

model posts {
  id           Int        @id @default(autoincrement())
  title        String     @db.VarChar(200)
  slug         String     @unique @db.VarChar(200)
  excerpt      String?
  content      String
  cover_image  String?    @db.VarChar(255)
  author_id    Int?
  is_published Boolean?   @default(false)
  published_at DateTime?  @db.Timestamptz(6)
  created_at   DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?  @default(now()) @db.Timestamptz(6)
  comments     comments[]
}

model users {
  id             Int        @id @default(autoincrement())
  name           String?    @db.VarChar(100)
  email          String     @unique @db.VarChar(150)
  email_verified DateTime?  @db.Timestamptz(6)
  image          String?    @db.VarChar(255)
  role           String?    @default("user") @db.VarChar(20)
  created_at     DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?  @default(now()) @db.Timestamptz(6)
  accounts       accounts[]
}